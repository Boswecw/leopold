<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { page } from '$app/stores';
  import { observationsStore, uiStore, authStore } from '$lib/stores';
  import { Plus, Map, List, Filter, Search, TrendingUp, Camera, Mic, MapPin, Calendar, Users } from 'lucide-svelte';
  import { Observation, ObservationFilters } from '../lib/types';
  
  // Page state
  let observations = [];
  let viewMode: 'map' | 'list' | 'grid' = 'map';
  let isLoading = true;
  let searchQuery = '';
  let showFilters = false;
  let selectedFilters: ObservationFilters = {};
  
  // Stats for dashboard
  let totalObservations = 0;
  let uniqueSpecies = 0;
  let thisWeekCount = 0;
  let myObservationsCount = 0;

  // Sample data - in a real app, this would come from an API
  const sampleObservations: Observation[] = [
    {
      id: '1',
      user_id: 'user1',
      observation_type: 'visual',
      species_name: 'American Robin',
      scientific_name: 'Turdus migratorius',
      location: {
        latitude: 40.7829,
        longitude: -73.9654,
        region: 'Central Park, New York'
      },
      timestamp: new Date().toISOString(),
      image_urls: ['https://example.com/robin1.jpg'],
      notes: 'Spotted feeding on the ground near the Bethesda Fountain',
      count: 2,
      confidence: 4,
      weather_conditions: 'Partly cloudy, 18°C',
      habitat_description: 'Urban park with mixed trees',
      created_at: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
      updated_at: new Date().toISOString(),
      is_verified: true
    },
    {
      id: '2',
      user_id: 'user2',
      observation_type: 'audio',
      species_name: 'Northern Cardinal',
      scientific_name: 'Cardinalis cardinalis',
      location: {
        latitude: 40.7505,
        longitude: -73.9934,
        region: 'Washington Square Park, New York'
      },
      timestamp: new Date().toISOString(),
      audio_url: 'https://example.com/cardinal.mp3',
      notes: 'Beautiful morning song from male cardinal',
      count: 1,
      confidence: 5,
      weather_conditions: 'Clear, 22°C',
      created_at: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
      updated_at: new Date().toISOString()
    },
    {
      id: '3',
      user_id: 'user1',
      observation_type: 'multi-modal',
      species_name: 'Red-eyed Tree Frog',
      scientific_name: 'Agalychnis callidryas',
      location: {
        latitude: 10.7560,
        longitude: -85.3756,
        region: 'Manuel Antonio, Costa Rica'
      },
      timestamp: new Date().toISOString(),
      image_urls: ['https://example.com/treefrog1.jpg', 'https://example.com/treefrog2.jpg'],
      audio_url: 'https://example.com/treefrog.mp3',
      notes: 'Found during night survey near stream. Very active and vocal.',
      count: 3,
      confidence: 5,
      weather_conditions: 'Humid, 26°C, light rain',
      habitat_description: 'Tropical rainforest near water source',
      behavior_notes: 'Calling behavior observed, territorial display',
      tags: ['rainforest', 'nocturnal', 'breeding'],
      created_at: new Date(Date.now() - 259200000).toISOString(), // 3 days ago
      updated_at: new Date().toISOString(),
      is_verified: true
    }
  ];

  onMount(async () => {
    try {
      // Load observations (in real app, this would be an API call)
      await loadObservations();
      calculateStats();
    } catch (error) {
      console.error('Error loading observations:', error);
      uiStore.showNotification('error', 'Failed to load observations');
    } finally {
      isLoading = false;
    }
  });

  async function loadObservations() {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    observations = sampleObservations;
    observationsStore.set(observations);
  }

  function calculateStats() {
    totalObservations = observations.length;
    
    // Count unique species
    const speciesSet = new Set(observations.map(obs => obs.species_name));
    uniqueSpecies = speciesSet.size;
    
    // Count observations from this week
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    thisWeekCount = observations.filter(obs => 
      new Date(obs.created_at) > weekAgo
    ).length;
    
    // Count user's observations (mock - would use actual user ID)
    myObservationsCount = observations.filter(obs => obs.user_id === 'user1').length;
  }

  function handleNewObservation() {
    goto('/observations/new');
  }

  function handleViewModeChange(mode: 'map' | 'list' | 'grid') {
    viewMode = mode;
  }

  function handleSearch() {
    if (searchQuery.trim()) {
      const filtered = sampleObservations.filter(obs => 
        obs.species_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        obs.scientific_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        obs.location.region?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        obs.notes?.toLowerCase().includes(searchQuery.toLowerCase())
      );
      observations = filtered;
    } else {
      observations = sampleObservations;
    }
  }

  function formatDate(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString();
  }

  function getObservationTypeIcon(type: string) {
    switch (type) {
      case 'visual': return Camera;
      case 'audio': return Mic;
      case 'multi-modal': return Camera; // Could be a combined icon
      default: return Camera;
    }
  }

  function getObservationTypeColor(type: string) {
    switch (type) {
      case 'visual': return 'text-blue-600';
      case 'audio': return 'text-green-600';
      case 'multi-modal': return 'text-purple-600';
      default: return 'text-gray-600';
    }
  }

  // Reactive search
  $: if (searchQuery !== undefined) {
    handleSearch();
  }
</script>

<svelte:head>
  <title>Leopold Nature Observer - Wildlife Observation Platform</title>
  <meta name="description" content="Discover and document wildlife through visual and audio observations. Join our community of nature enthusiasts and citizen scientists." />
</svelte:head>

<div class="home-page">
  <!-- Hero Section -->
  <section class="hero bg-gradient-to-br from-primary-forest to-primary-forest/80 text-white py-16">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl md:text-6xl font-bold mb-6">
          Discover Wildlife
          <span class="block text-green-300">Around You</span>
        </h1>
        <p class="text-xl md:text-2xl mb-8 text-green-100">
          Document, identify, and share your wildlife observations using advanced AI-powered tools
        </p>
        
        <!-- CTA Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            on:click={handleNewObservation}
            class="flex items-center justify-center gap-2 px-8 py-4 bg-white text-primary-forest font-semibold rounded-lg hover:bg-gray-50 transition-colors"
          >
            <Plus class="w-5 h-5" />
            New Observation
          </button>
          <button
            on:click={() => viewMode = 'map'}
            class="flex items-center justify-center gap-2 px-8 py-4 border-2 border-white text-white font-semibold rounded-lg hover:bg-white hover:text-primary-forest transition-colors"
          >
            <Map class="w-5 h-5" />
            Explore Map
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Stats Section -->
  <section class="stats py-12 bg-gray-50">
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto">
        <div class="stat-card text-center p-6 bg-white rounded-lg shadow-sm">
          <div class="text-3xl font-bold text-primary-forest mb-2">{totalObservations}</div>
          <div class="text-sm text-gray-600 flex items-center justify-center gap-1">
            <TrendingUp class="w-4 h-4" />
            Total Observations
          </div>
        </div>
        
        <div class="stat-card text-center p-6 bg-white rounded-lg shadow-sm">
          <div class="text-3xl font-bold text-blue-600 mb-2">{uniqueSpecies}</div>
          <div class="text-sm text-gray-600 flex items-center justify-center gap-1">
            <Search class="w-4 h-4" />
            Species Documented
          </div>
        </div>
        
        <div class="stat-card text-center p-6 bg-white rounded-lg shadow-sm">
          <div class="text-3xl font-bold text-green-600 mb-2">{thisWeekCount}</div>
          <div class="text-sm text-gray-600 flex items-center justify-center gap-1">
            <Calendar class="w-4 h-4" />
            This Week
          </div>
        </div>
        
        <div class="stat-card text-center p-6 bg-white rounded-lg shadow-sm">
          <div class="text-3xl font-bold text-purple-600 mb-2">{myObservationsCount}</div>
          <div class="text-sm text-gray-600 flex items-center justify-center gap-1">
            <Users class="w-4 h-4" />
            My Contributions
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <main class="main-content py-8">
    <div class="container mx-auto px-4">
      <!-- Controls Bar -->
      <div class="controls-bar flex flex-col md:flex-row gap-4 mb-8">
        <!-- Search -->
        <div class="search-section flex-1">
          <div class="relative">
            <Search class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <input
              type="text"
              bind:value={searchQuery}
              placeholder="Search species, locations, or notes..."
              class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-forest focus:border-primary-forest"
            />
          </div>
        </div>

        <!-- View Mode Toggles -->
        <div class="view-modes flex bg-gray-100 rounded-lg p-1">
          <button
            on:click={() => handleViewModeChange('map')}
            class="flex items-center gap-2 px-4 py-2 rounded-md transition-colors {viewMode === 'map' 
              ? 'bg-white text-primary-forest shadow-sm' 
              : 'text-gray-600 hover:text-gray-800'}"
          >
            <Map class="w-4 h-4" />
            Map
          </button>
          <button
            on:click={() => handleViewModeChange('list')}
            class="flex items-center gap-2 px-4 py-2 rounded-md transition-colors {viewMode === 'list' 
              ? 'bg-white text-primary-forest shadow-sm' 
              : 'text-gray-600 hover:text-gray-800'}"
          >
            <List class="w-4 h-4" />
            List
          </button>
          <button
            on:click={() => handleViewModeChange('grid')}
            class="flex items-center gap-2 px-4 py-2 rounded-md transition-colors {viewMode === 'grid' 
              ? 'bg-white text-primary-forest shadow-sm' 
              : 'text-gray-600 hover:text-gray-800'}"
          >
            <div class="w-4 h-4 grid grid-cols-2 gap-0.5">
              <div class="bg-current rounded-sm"></div>
              <div class="bg-current rounded-sm"></div>
              <div class="bg-current rounded-sm"></div>
              <div class="bg-current rounded-sm"></div>
            </div>
            Grid
          </button>
        </div>

        <!-- Filters -->
        <button
          on:click={() => showFilters = !showFilters}
          class="flex items-center gap-2 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          <Filter class="w-4 h-4" />
          Filters
        </button>
      </div>

      <!-- Loading State -->
      {#if isLoading}
        <div class="loading-state flex flex-col items-center justify-center py-16">
          <div class="animate-spin w-8 h-8 border-3 border-primary-forest border-t-transparent rounded-full mb-4"></div>
          <p class="text-gray-600">Loading observations...</p>
        </div>
      
      <!-- No Results -->
      {:else if observations.length === 0}
        <div class="no-results flex flex-col items-center justify-center py-16">
          <Search class="w-16 h-16 text-gray-400 mb-4" />
          <h3 class="text-xl font-semibold text-gray-700 mb-2">No observations found</h3>
          <p class="text-gray-600 mb-6">
            {searchQuery ? 'Try adjusting your search terms' : 'Be the first to document wildlife in your area!'}
          </p>
          <button
            on:click={handleNewObservation}
            class="flex items-center gap-2 px-6 py-3 bg-primary-forest text-white rounded-lg hover:bg-primary-forest/90"
          >
            <Plus class="w-5 h-5" />
            Add Observation
          </button>
        </div>

      <!-- Results -->
      {:else}
        <!-- Map View -->
        {#if viewMode === 'map'}
          <div class="map-view">
            <div class="map-placeholder bg-gray-100 rounded-lg p-8 text-center">
              <Map class="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 class="text-lg font-semibold text-gray-700 mb-2">Interactive Map</h3>
              <p class="text-gray-600">
                Map component would be rendered here showing observation locations
              </p>
              <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-w-4xl mx-auto">
                {#each observations.slice(0, 6) as observation}
                  <div class="map-popup-preview bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
                    <div class="flex items-center gap-3">
                      <div class="observation-icon">
                        <svelte:component 
                          this={getObservationTypeIcon(observation.observation_type)} 
                          class="w-6 h-6 {getObservationTypeColor(observation.observation_type)}"
                        />
                      </div>
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">{observation.species_name}</h4>
                        <div class="flex items-center gap-1 text-sm text-gray-600">
                          <MapPin class="w-3 h-3" />
                          {observation.location.region}
                        </div>
                      </div>
                    </div>
                  </div>
                {/each}
              </div>
            </div>
          </div>

        <!-- List View -->
        {:else if viewMode === 'list'}
          <div class="list-view space-y-4">
            {#each observations as observation}
              <div class="observation-card bg-white p-6 rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                <div class="flex items-start gap-4">
                  <!-- Type Icon -->
                  <div class="observation-type-icon flex-shrink-0 mt-1">
                    <svelte:component 
                      this={getObservationTypeIcon(observation.observation_type)} 
                      class="w-6 h-6 {getObservationTypeColor(observation.observation_type)}"
                    />
                  </div>

                  <!-- Content -->
                  <div class="flex-1">
                    <!-- Header -->
                    <div class="flex items-start justify-between mb-3">
                      <div>
                        <h3 class="text-lg font-semibold text-gray-900">{observation.species_name}</h3>
                        {#if observation.scientific_name}
                          <p class="text-sm italic text-gray-600">{observation.scientific_name}</p>
                        {/if}
                      </div>
                      <div class="text-right">
                        <div class="text-sm text-gray-500">{formatDate(observation.created_at)}</div>
                        {#if observation.is_verified}
                          <div class="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full mt-1">
                            <div class="w-1.5 h-1.5 bg-green-600 rounded-full"></div>
                            Verified
                          </div>
                        {/if}
                      </div>
                    </div>

                    <!-- Location & Count -->
                    <div class="flex items-center gap-4 mb-3 text-sm text-gray-600">
                      <div class="flex items-center gap-1">
                        <MapPin class="w-4 h-4" />
                        {observation.location.region}
                      </div>
                      {#if observation.count && observation.count > 1}
                        <div class="flex items-center gap-1">
                          <Users class="w-4 h-4" />
                          {observation.count} individuals
                        </div>
                      {/if}
                    </div>

                    <!-- Notes -->
                    {#if observation.notes}
                      <p class="text-gray-700 mb-3">{observation.notes}</p>
                    {/if}

                    <!-- Tags -->
                    {#if observation.tags && observation.tags.length > 0}
                      <div class="flex flex-wrap gap-2 mb-3">
                        {#each observation.tags as tag}
                          <span class="inline-flex items-center px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
                            {tag}
                          </span>
                        {/each}
                      </div>
                    {/if}

                    <!-- Media Indicators -->
                    <div class="flex items-center gap-4 text-sm">
                      {#if observation.image_urls && observation.image_urls.length > 0}
                        <div class="flex items-center gap-1 text-blue-600">
                          <Camera class="w-4 h-4" />
                          {observation.image_urls.length} photo{observation.image_urls.length !== 1 ? 's' : ''}
                        </div>
                      {/if}
                      {#if observation.audio_url}
                        <div class="flex items-center gap-1 text-green-600">
                          <Mic class="w-4 h-4" />
                          Audio recording
                        </div>
                      {/if}
                      {#if observation.weather_conditions}
                        <div class="text-gray-500">
                          {observation.weather_conditions}
                        </div>
                      {/if}
                    </div>
                  </div>
                </div>
              </div>
            {/each}
          </div>

        <!-- Grid View -->
        {:else if viewMode === 'grid'}
          <div class="grid-view grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {#each observations as observation}
              <div class="observation-card bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow overflow-hidden">
                <!-- Image/Media Header -->
                <div class="card-header h-48 bg-gradient-to-br from-gray-100 to-gray-200 relative">
                  {#if observation.image_urls && observation.image_urls.length > 0}
                    <div class="absolute inset-0 bg-gray-300 flex items-center justify-center">
                      <Camera class="w-12 h-12 text-gray-500" />
                    </div>
                  {:else if observation.audio_url}
                    <div class="absolute inset-0 bg-green-100 flex items-center justify-center">
                      <Mic class="w-12 h-12 text-green-600" />
                    </div>
                  {:else}
                    <div class="absolute inset-0 bg-primary-forest/10 flex items-center justify-center">
                      <Search class="w-12 h-12 text-primary-forest" />
                    </div>
                  {/if}
                  
                  <!-- Type Badge -->
                  <div class="absolute top-2 left-2">
                    <div class="inline-flex items-center gap-1 px-2 py-1 bg-white/90 backdrop-blur-sm rounded-full text-xs font-medium {getObservationTypeColor(observation.observation_type)}">
                      <svelte:component 
                        this={getObservationTypeIcon(observation.observation_type)} 
                        class="w-3 h-3"
                      />
                      {observation.observation_type}
                    </div>
                  </div>

                  <!-- Verified Badge -->
                  {#if observation.is_verified}
                    <div class="absolute top-2 right-2">
                      <div class="inline-flex items-center gap-1 px-2 py-1 bg-green-600/90 backdrop-blur-sm text-white rounded-full text-xs">
                        <div class="w-1.5 h-1.5 bg-white rounded-full"></div>
                        Verified
                      </div>
                    </div>
                  {/if}
                </div>

                <!-- Card Content -->
                <div class="card-content p-4">
                  <div class="mb-3">
                    <h3 class="font-semibold text-gray-900 mb-1">{observation.species_name}</h3>
                    {#if observation.scientific_name}
                      <p class="text-sm italic text-gray-600">{observation.scientific_name}</p>
                    {/if}
                  </div>

                  <!-- Location -->
                  <div class="flex items-center gap-1 text-sm text-gray-600 mb-2">
                    <MapPin class="w-3 h-3" />
                    <span class="truncate">{observation.location.region}</span>
                  </div>

                  <!-- Notes Preview -->
                  {#if observation.notes}
                    <p class="text-sm text-gray-700 mb-3 line-clamp-2">{observation.notes}</p>
                  {/if}

                  <!-- Footer -->
                  <div class="flex items-center justify-between text-xs text-gray-500">
                    <span>{formatDate(observation.created_at)}</span>
                    {#if observation.count && observation.count > 1}
                      <span>{observation.count} individuals</span>
                    {/if}
                  </div>
                </div>
              </div>
            {/each}
          </div>
        {/if}
      {/if}
    </div>
  </main>

  <!-- Floating Action Button -->
  <button
    on:click={handleNewObservation}
    class="fab fixed bottom-6 right-6 w-14 h-14 bg-primary-forest text-white rounded-full shadow-lg hover:bg-primary-forest/90 hover:scale-105 transition-all z-50"
    aria-label="New observation"
  >
    <Plus class="w-6 h-6" />
  </button>
</div>

<style>
  .home-page {
    min-height: 100vh;
    background-color: #fefefe;
  }

  .hero {
    background-image: 
      radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3), transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3), transparent 50%),
      radial-gradient(circle at 40% 80%, rgba(120, 219, 155, 0.3), transparent 50%);
  }

  .stat-card {
    border: 1px solid #e5e7eb;
    transition: transform 0.2s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
  }

  .observation-card {
    transition: all 0.2s ease;
  }

  .observation-card:hover {
    transform: translateY(-1px);
  }

  .map-placeholder {
    min-height: 400px;
  }

  .fab {
    box-shadow: 0 8px 24px rgba(6, 95, 70, 0.4);
  }

  .fab:hover {
    box-shadow: 0 12px 32px rgba(6, 95, 70, 0.5);
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Custom scrollbar */
  .list-view {
    max-height: 80vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f9fafb;
  }

  .list-view::-webkit-scrollbar {
    width: 6px;
  }

  .list-view::-webkit-scrollbar-track {
    background: #f9fafb;
    border-radius: 3px;
  }

  .list-view::-webkit-scrollbar-thumb {
    background-color: #d1d5db;
    border-radius: 3px;
  }

  .list-view::-webkit-scrollbar-thumb:hover {
    background-color: #9ca3af;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero h1 {
      font-size: 2.5rem;
    }

    .hero p {
      font-size: 1.125rem;
    }

    .controls-bar {
      position: sticky;
      top: 0;
      background: white;
      z-index: 10;
      padding: 1rem 0;
      margin: -1rem 0 1rem 0;
      border-bottom: 1px solid #e5e7eb;
    }

    .fab {
      bottom: 1rem;
      right: 1rem;
      width: 3.5rem;
      height: 3.5rem;
    }

    .grid-view {
      grid-template-columns: 1fr;
    }
  }

  /* Focus styles */
  button:focus,
  input:focus {
    outline: 2px solid #065f46;
    outline-offset: 2px;
  }

  /* Card hover effects */
  .card-header {
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
  }

  /* Truncate text */
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  /* Animation for loading state */
  .loading-state,
  .no-results {
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
